/ *! Plugin de Validação jQuery - v1.14.0 - 30/06/2015
 * http://jqueryvalidation.org/
 * Copyright (c) 2015 Jörn Zaefferer; Licenciado MIT * /
! function (a) {"function" == typeof define && define.amd? define (["jquery"], a): a (jQuery)} (função (a) {a.extend (a.fn, {validate: function (b) <====================================================================================================================== "validator"); return c? c: (this.attr ("novalidate", "novalidate"), c = new a.validator (b, this [0]), a.data (this [0], "validator" "c), c.settings.onsubmit && (this.on (" click.validate ",": submit ", função (b) {c.settings.submitHandler && (c.submitButton = b.target), a (este) .hasClass ("cancelar") && (c.cancelSubmit =! 0), void 0! == a (this) .attr ("formnovalidate") && (c.cancelSubmit =! 0)}), this.on (" submit.validate ",função (b) {function d () {var d, e; return c.settings.submitHandler? (c.submitButton && (d = a ("<input type = 'hidden' />"). attr ("nome", c.submitButton.name) .val (a (c.submitButton) .val ()). appendTo (c.currentForm)), e = c.settings.submitHandler.call (c, c.currentForm, b), c. submitButton && d.remove (), void 0! == e? e:! 1) :! 0} return c.settings.debug && b.preventDefault (), c.cancelSubmit? (c.cancelSubmit =! 1, d ()): c.form ()? c.pendingRequest? (c.formSubmitted =! 0,! 1): d () :( c.focusInvalid () ,! 1)})), c)}, válido: function () { var b, c, d; return a (this [0]). is ("form")? b = this.validate (). form () :( d = [], b =! 0, c = a ( [0] .form) .validate (), this.each (function () {b = c.element (this) && b, d = d.concat (c.errorList)}), c.errorList = d), b}, regras: função (b, c) {var d, e, f, g, h, i, j = this [0]; se (b) alternar (d = a.data (j.form, "validator ") .settings, e = d.regras, f = a.validator.staticRules (j), b) {case "add": a.extend (f, a.validator.normalizeRule (c)), delete f.messages, e [j.name] = f , c.messages && (d.messages [j.name] = a.extend (d.messages [j.name], c.messages)); break; case "remove": return c? (i = {}, a .each (c.split (/ \ s /), função (b, c) {i [c] = f [c], delete f [c], "required" === c && a (j) .removeAttr (" Aria-required ")}), i) :( apagar e [j.name], f)} retornar g = a.validator.normalizeRules (a.extend ({}, a.validator.classRules (j), a. validator.attributeRules (j), a.validator.dataRules (j), a.validator.staticRules (j)), j), g.required && (h = g.required, delete g.required, g = a.extend ( {obrigatório: h}, g), a (j) .attr ("aria-required", "true")), g.remote && (h = g.remote, delete g.remote, g = a.extend (g , {remote: h}), g}}), a.extend (a.expr [":"], {blank: function (b) {return! a.trim (""+ a (b) .val ())}, preenchido: function (b) {return !! a.trim (" "+ a (b) .val ())}, desmarcado: function (b) {return! a (b) .prop ("verificado")}}), a.validator = função (b, c) {this.settings = a.extend (! 0, {}, a.validator.defaults, b), isto .currentForm = c, this.init ()}, a.validator.format = função (b, c) {return 1 === arguments.length? function () {var c = a.makeArray (argumentos); return c .unshift (b), a.validator.format.apply (this, c)} :( arguments.length> 2 && c.constructor! == Array && (c = a.makeArray (argumentos) .slice (1)), c. construtor == Array && (c = [c]), a.each (c, function (a, c) {b = b.replace (novo RegExp ("\\ {" + a + "\\}", "g "), function () {return c})}), b)}, a.extend (a.validator, {defaults: {messages: {}, groups: {}, rules: {}, errorClass:" error " , validClass: "válido", errorElement: "label", focusCleanup:! 1, focusInvalid:! 0,errorContainer: a ([]), errorLabelContainer: a ([]), onsubmit:! 0, ignore: ": hidden", ignoreTitle:! 1, onfocusin: function (a) {this.lastActive = a, this.settings. focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call (this, a, this.settings.errorClass, this.settings.validClass), this.hideThese (this.errorsFor (a)))}, onfocusout: function (a ) {this.checkable (a) ||! (a.name neste.submitado) && this.optional (a) || this.element (a)}, onkeyup: função (b, c) {var d = [16 , 17,18,20,35,36,37,38,39,40,45,144,225]; 9 === c.which && "" === this.elementValue (b) || -1! == a.inArray (c.keyCode, d) || (b.name neste.submitted || b === this.lastElement) && this.element (b)}, onclick: function (a) {a.name neste.submitado? this.element (a): a.parentNode.name neste.submitted && this.element (a.parentNode)}, destaque: função (b, c, d) {"rádio "=== b.type? this.findByName (b.name) .addClass (c) .removeClass (d): a (b) .addClass (c) .removeClass (d)}, não destacar: função (b, c d) {"rádio" === b.type? this.findByName (b.name) .removeClass (c) .addClass (d): a (b) .removeClass (c) .addClass (d)}} , setDefaults: function (b) {a.extend (a.validator.defaults, b)}, mensagens: {necessário: "Este campo é obrigatório.", remoto: "Por favor, corrija este campo". E-mail: "Por favor insira um endereço de e-mail válido. ", url:" Por favor insira um URL válido ". Data:" Insira uma data válida. ", dateISO:" Digite uma data válida (ISO). ", número:" Digite um válido número ". dígitos:" Digite apenas os dígitos ". Cartão de crédito:" Insira um número de cartão de crédito válido ". Igual:" Insira novamente o mesmo valor ". maxlength: a.validator.format ("Não insira mais do que {0} caracteres. "), Minlength: a.validator.format (" Por favor insira pelo menos {0} caracteres. "), Rangelength: a.validator.format (" Por favor insira um valor entre {0 } e {1} caracteres longos. "), intervalo: a.validator.format (" Por favor, insira um valor entre {0} e {1}. "), max: a.validator.format (" Por favor insira um valor menos ou igual a {0}. "), min: a.validator.format (" Por favor insira um valor maior ou igual a {0}. ")}, autoCreateRanges:! 1, protótipo: {init: function () {function b (b) {var c = a.data (this.form, "validator"), d = "on" + b.type.replace (/ ^ validate /, ""), e = c.settings; e [d] &&! a (this) .is (e.ignore) && e [d] .call (c, this, b)} this.labelContainer = a (this.settings.errorLabelContainer), this.errorContext = this. labelContainer.length && this.labelContainer || a (this.currentForm), this.containers = a (this.settings.errorContainer) .add (this.settings.errorLabelContainer), this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, this.invalid = {}, this.reset (); var c, d = this.groups = {}; a.each (this.settings.groups, function (b, c) {"string" == typeof c && (c = c.split (/ \ s /)), a.each (c, função (a, c) {d [c] = b})}), c = isto. settings.rules, a.each (c, função (b, d) {c [b] = a.validator.normalizeRule (d)}), a (this.currentForm) .on ("focusin.validate focusout.validate keyup .validate ",": text, [type = 'password'], [type = 'file'], selecione, textarea, [type = 'number'], [type = 'search'], [type = 'tel' ], [type = 'url'], [type = 'email'], [type = 'datetime'], [type = 'date'], [type = 'month'], [type = 'week'], [type = 'tempo '], [type =' datetime-local '], [type =' range '], [type =' color '], [type =' radio '], [type =' checkbox '] ", b). on ("click.validate", "select, option, [type = 'radio'], [type = 'checkbox']", b), this.settings.invalidHandler && a (this.currentForm) .on ("formulário inválido" .validate ", this.settings.invalidHandler), a (this.currentForm) .find (" [requerido], [requisito de regra de dados], .requisificado "). attr (" aria-required "," true ") }, form: function () {return this.checkForm (), a.extend (this.submitted, this.errorMap), this.invalid = a.extend ({}, this.errorMap), this.valid () | | a (this.currentForm) .triggerHandler ("inválido-formulário", [este]), this.showErrors (), this.valid ()}, checkForm: function () {this.prepareForm (); for (var a = 0, b = this.currentElements = this.elements (); b [a]; a ++) this.verificar (b [a]); retornar this.valid ()}, elemento: function (b) {var c = this.clean (b), d = this.validationTargetFor (c), e =! 0; retornar isso. lastElement = d, void 0 === d? delete this.invalid [c.name] :( this.prepareElement (d), this.currentElements = a (d), e = this.check (d)! ==! 1, e? Delete this.invalid [d.name]: this.invalid [d.name] =! 0), a (b) .attr ("aria-invalid",! E), this.numberOfInvalids () | | (this.toHide = this.toHide.add (this.containers)), this.showErrors (), e}, showErrors: function (b) {if (b) {a.extend (this.errorMap, b), this.freeByName (c) [0]}); this.successList = a] this.successList, function (a) {return! (a.name in b)})} this.settings.showErrors? this.settings.showErrors.call (this, this.errorMap, this.errorList): this.defaultShowErrors ( )}, resetForm: function () {a.fn.resetForm && a (this.currentForm) .resetForm (), isto.some = {}, this.lastElement = null, this.prepareForm (), this.hideErrors (); var b, c = this.elements (). removeData ("previousValue"). removeAttr ("aria-invalid"); se (this.settings.unhighlight) para (b = 0; c [b]; b ++) this.settings.unhighlight.call (this, c [b], this.settings.errorClass, ""); else c.removeClass (this.international)}, numberOfInvalids: function () {return this.objectLength (this.invalid)}, objectLength: function (a) {var b, c = 0; para (b em a) c ++; return c }, hideErrors: function () {this.hideThese (this.toHide)}, hideThese: function (a) {a.not (this.containers) .text (""), this.addWrapper (a) .hide () }, válido: function () {return 0 === this.size ()}, tamanho: function () {return this.errorList.length}, focusInvalid: function () {if (this.settings.focusInvalid) tente { a (this.findLastActive () || this.errorList.length && this.errorList [0] .element || []). filter (":visível "). focus (). trigger (" focusin ")} catch (b) {}}, findLastActive: function () {var b = this.lastActive; return b && 1 === a.grep (this.errorList, função (a) {return a.element.name === b.name}). length && b}, elements: function () {var b = this, c = {}; return a (this.currentForm) .find ("input , selecione, textarea "). not (": submit,: reset,: image,: disabled "). not (this.settings.ignore) .filter (function () {return! this.name && b.settings.debug && window.console && console .error ("% o não tem nome atribuído", isto), this.name em c ||! b.objectLength (a (this) .rules ()) ?! 1: (c [this.name] =! 0 ,! 0)})}, clean: function (b) {return a (b) [0]}, errors: function () {var b = this.settings.errorClass.split ("") .join (". "); retornar a (this.settings.errorElement +". "+ b, this.errorContext)}, reset: function () {this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = a ([]), this.toHide = a ([]), this.currentElements = a ([])}, prepareForm: function () {this.reset (), this.toHide = this.errors (). add (this.containers)}, prepareElement: function (a) {this.reset (), this.toHide = this.errorsFor (a)}, elementValue: function (b) {var c, d = a (b), e = b.type; retorna "rádio" === e || "caixa de seleção" === e? this.findByName ( b.name) .filter (": checked"). val (): "number" === e && "undefined"! = typeof b.validity? b.validity.badInput?! 1: d.val () :( c = d.val (), "string" == typeof c? c.replace (/ \ r / g, ""): c)}, verifique: function (b) {b = this.validationTargetFor (this.clean (b, g), r, f, função (a, b) {retorno b}). comprimento, h =! 1, i = this.elementValue (b); para (d em f) {e = {método: d, parâmetros: f [d]}; tente {if (c = a.validator.methods [d] .call (isto, eu, b, e.parâmetros), "dependency-mismatch" === c && 1 === g) {h =! 0; continuar} se (h =! 1, "pendente" === c) retornar void (this.toHide = this.toHide .not (this.errorsFor (b))); se (! c) retornar this.formatAndAdd (b, e) ,! 1} catch (j) {throw this.settings.debug && window.console && console.log ("Exceção ocorreu quando verificando o elemento "+ b.id +", verifique o método '"+ e.method +". ", j), j instanceof TypeError && (j.message + =". Exceção ocorreu ao verificar o elemento "+ b.id +", verifique o '+ e.method +' 'método. "), j}} se (! h) retornar this.objectLength (f) && this.successList.push (b) ,! 0}, customDataMessage: função (b, c) { retornar um (b) .data ("msg" + c.charAt (0) .toUpperCase () + c.substring (1) .toLowerCase ()) || a (b) .data ("msg")}, customMessage : function (a, b) {var c = this.settings.messages [a]; return c && (c.constructor === String? c: c [b])}, findDefined: function () {for (var a = 0; a <arguments.length; a ++) se ( void 0! == argumentos [a]) retornar argumentos [a]; return void 0}, defaultMessage: function (b, c) {return this.findDefined (this.customMessage (b.name, c), this.customDataMessage ( b, c), this.settings.ignoreTitle && b.title || void 0, a.validator.messages [c], "<strong> Aviso: Nenhuma mensagem definida para" + b.name + "</ strong>")} , formatAndAdd: function (b, c) {var d = this.defaultMessage (b, c.method), e = / \ $? \ {(\ d +) \} / g; "function" == typeof d? d = d.call (this, c.parameters, b): e.test (d) && (d = a.validator.format (d.replace (e, "{$ 1}"), c.parameters)), isto () :. ) {return this.settings.wrapper && (a = a.add (a.parent (this.settings.wrapper))), a}, defaultShowErrors: function () {var a, b, c; para (a = 0; this.errorList [a]; a ++) c = this.errorList [a], this.settings.highlight && this.settings.highlight.call (isto, c.element, this.settings.errorClass, this.settings.validClass), this.showLabel (c.element, c.message), se (this.errorList.length && (this.toShow = this.toShow.add (this.containers)), this.settings.success) para (a = 0; this.successList [a]; a ++) this.showLabel (this.successList [a]); se (this.settings.unhighlight) for (a = 0, b = this.validElements (); b [a]; a ++) this.settings.unhighlight.call (este , b [a], this.settings.errorClass, this.settings.validClass); this.toHide = this.toHide.not (this.toShow), this.hideErrors (), this.addWrapper (this.toShow) .show ()}, validElements: function () {return this.currentElements.not (this.invalidElements ())}, invalidElements:function () {return a (this.errorList) .map (function () {return this.element})}, showLabel: função (b, c) {var d, e, f, g = this.errorsFor (b) , h = this.idOrName (b), i = a (b) .attr ("aria-describedby"); g.length? (g.removeClass (this.settings.validClass) .addClass (this.settings.errorClass) g.html (c)) :( g = a ("<" + this.settings.errorElement + ">"). attr ("id", h + "- error"). addClass (this.settings.errorClass). html (c || ""), d = g, this.settings.wrapper && (d = g.hide (). show (). wrap ("<" + this.settings.wrapper + "/>"). pai ( )) this.labelContainer.append (d): this.settings.errorPlacement? this.settings.errorPlacement (d, a (b)): d.insertAfter (b), g.is (" etiqueta ")? g.attr (" for ", h): 0 === g.parents (" label [for = '"+ h +"'] "). length && (f = g.attr ("id"). replace (/ (: | \. | \ [| \] | \ $) / g, "\\ $ 1"), i? i.match (novo RegExp ("\\ b" + f + "\\ b")) || (i + = "" + f): i = f, a (b) .attr ("aria-describedby", i), e = this.groups [b.name], e && a.each (this.groups, function (b, c) {c === e && a ("[name = '" + b + "']", this.currentForm) .attr ("aria-describedby", g.attr ("id"))}))) ,! c && this.settings.success && (g.text (""), "string" == typeof this.settings.success? g.addClass (this.settings.success): isto .settings.success (g, b)), this.toShow = this.toShow.add (g)}, errorsFor: function (b) {var c = this.idOrName (b), d = a (b) .attr ("aria-describedby"), e = "label [for = '" + c + "'], label [for = '" + c + "'] *"; return d && (e = e + ", #" + d. substituir (/ \ s + / g, ", #")),this.groups [a.name] || (this.checkable (a)? a.name: a.id || a.name )}, validationTargetFor: function (b) {return this.checkable (b) && (b = this.findByName (b.name)), a (b) .not (this.settings.ignore) [0]}, verificável : function (a) {return / radio | checkbox / i.test (a.type)}, findByName: function (b) {return a (this.currentForm) .find ("[name = '" + b + "'] ")}, getLength: função (b, c) {switch (c.nodeName.toLowerCase ()) {case" select ": retorna uma (" opção: selected ", c) .length; case" input ": if ( this.findByName (c.name) .filter (": checked"). length} return b.length}, dependem: function (a, b) {return this.dependTypes [typeof a] ? this.dependTypes [typeof a] (a, b) :! 0}, dependTypes: {"boolean": função (a) {return a}, string: function (b, c) {return !! a (b, c.form) .length},"função": função (a, b) {return a (b)}}, opcional: função (b) {var c = this.elementValue (b); return! a.validator.methods.required.call (isto, c, b) && "dependency-mismatch"}, startRequest: function (a) {this.pending [a.name] || (this.pendingRequest ++, this.pending [a.name] =! 0)}, stopRequest: função (b, c) {this.pendingRequest -, this.pendingRequest <0 && (this.pendingRequest = 0), exclua this.pending [b.name], c && 0 === this.pendingRequest && this.formSubmitou && this.form ()? (a (this.currentForm) .submit (), this.formSubmitted =! 1) :! c && 0 === this.pendingRequest && this.formSubmitted && (a (this.currentForm) .triggerHandler ("inválido-formulário", [este]) , this.formSubmitted =! 1)}, previousValue: function (b) {return a.data (b, "previousValue") || a.data (b, "previousValue", {old: null, válido:! 0, mensagem: isto.defaultMessage (b, "remote")})}, destroy: function () {this.resetForm (), a (this.currentForm) .off (". validate"). removeData ("validator")}}, classRuleSettings: {obrigatório: {necessário:! 0}, email: {email:! 0}, url: {url:! 0}, data: {date:! 0}, dateISO: {dateISO:! 0}, número: {número :! 0}, cartão de crédito: {creditcard:! 0}}, addClassRules: function (b, c) {b.constructor === String? This.classRuleSettings [b] = c: a.extend (this.classRuleSettings, b)}, classRules: function (b) {var c = {}, d = a (b) .attr ("class"); return d && a.each (d.split ("" ), function () {this in a.validator.classRuleSettings && a.extend (c, a.validator.classRuleSettings [this])}), c}, normalizeAttributeRule: função (a, b, c, d) {/ min | max /.test(c)&&(null===b||/number|range|text/.test(b))&&(d=Number(d),isNaN(d)&&(d=void 0)), d || 0 === d? a [c] = d: b === c &e "range"! == b && (a [c] =! 0)}, attributeRules: function (b) {var c, d, e = {}, f = a (b), g = b.getAttribute (" digite "); para (c em a.validator.methods)" required "=== c? (d = b.getAttribute (c)," "=== d && (d =! 0), d = !! d ): d = f.attr (c), this.normalizeAttributeRule (e, g, c, d); return e.maxlength && / - 1 | 2147483647 | 524288 / .test (e.maxlength) && delete e.maxlength, e} DataRules: function (b) {var c, d, e = {}, f = a (b), g = b.getAttribute ("type"); para (c em a.validator.methods) d = f. dados ("regra" + c.charAt (0) .toUpperCase () + c.substring (1) .toLowerCase ()), this.normalizeAttributeRule (e, g, c, d); return e}, staticRules: function ( b) {var c = {}, d = a.data (b.form, "validator"); return d.settings.rules && (c = a.validator.normalizeRule (d.settings.rules [b.name]) || {}), c}, normalizeRules: function (b, c) {return a.each (b, function (d,e) {if (e ===! 1) return void delete b [d]; if (e.param || e.depends) {var f =! 0; switch (typeof e.depends) {case "string" : f = !! a (e.depends, c.form) .length; break; case "function": f = e.depends.call (c, c)} f? b [d] = void 0! == e.param? e.param:! 0: delete b [d]}}), a.each (b, função (d, e) {b [d] = a.isFunction (e)? e (c): e}), a.each (["minlength", "maxlength"], function () {b [this] && (b [this] = Number (b [this]))}), a.each ([" rangelength "," range "], function () {var c; b [this] && (a.isArray (b [this])? b [this] = [Número (b [este] [0]), Número ( b [this] [1])]: "string" == typeof b [this] && (c = b [this] .replace (/ [\ [\]] / g, ""). split (/ [\ s]] + /), b [this] = [Número (c [0]), Número (c [1])]))}), a.validator.autoCreateRanges && (null! = b.min && null! = b. max && (b.range = [b.min, b.max], delete b.min, delete b.max), null! = b.minlength && null! = b.maxlength && (b.rangelength = [b.minlength, b.maxlength], delete b.minlength, delete b.maxlength)), b}, normalizeRule: function (b) {if ("string" == typeof b) {var c = {}; a.each (b.split (/ \ s /), function () {c [this] =! 0}), b = c} return b}, addMethod: função ( b, c, d) {a.validator.methods [b] = c, a.validator.messages [b] = void 0! == d? d: a.validator.messages [b], c.length <3 && a .validator.addClassRules (b, a.validator.normalizeRule (b))}, métodos: {required: function (b, c, d) {if (! this.depend (d, c)) retornam "dependência-incompatibilidade" ; se ("selecionar" === c.nodeName.toLowerCase ()) {var e = a (c) .val (); retornar e && e.length> 0} retornar this.checkable (c)? this.getLength (b , c)> 0: b.length> 0}, email: function (a, b) {return this.optional (b) || / ^ [a-zA-Z0-9.! # $% & '* + \ / =? ^ _ `{|} ~ -] + @ [a-zA-Z0-9] (?: [a-zA-Z0-9 -] {0,61} [a-zA-Z0-9 ])? (?: \.[a-zA-Z0-9] (?: [a-zA-Z0-9 -] {0,61} [a-zA-Z0-9])?) * $ /. teste (a)}, url : function (a, b) {return this.optional (b) || / ^ (? :(? :( ?: https? | ftp):)? \ / \ /) (?: \ S + (? :: \ (*: \! \? {10: 127) \ .168) (?: \. \ D {1,3}) {2}) (?! 172 \. (?: 1 [6-9] | 2 \ d | 3 [0-1]) (? : \. \ d {1,3}) {2}) (?: [1-9] \ d? | 1 \ d \ d | 2 [01] \ d | 22 [0-3]) (?: \ (.: 1? \ D {1,2} | 2 [0-4] \ d | 25 [0-5])) {2} (?: \. (?: [1-9] \ d ? | 1 \ d \ d | 2 [0-4] \ d | 25 [0-4])) | (?: (?: [Az \ u00a1- \ uffff0-9] - *) * [az \ u00a1 - \ uffff0-9] +) (?: \. (?: [az \ u00a1- \ uffff0-9] - *) * [az \ u00a1- \ uffff0-9] +) * (?: \. (? : [az \ u00a1- \ uffff] {2,})).?) (? :: \ d {2,5})? (?: [/? #] \ S *)? $ / i.test ( a)}, data: function (a, b) {return this.optional (b) ||! / Invalid | NaN / .test (new Date (a) .toString ())}, dateISO: function (a, b ) {return this.optional (b) || / ^ \ d {4} [\ / \ -] (0? [1-9] | 1 [012]) [\ / \ -] (0? [1- 9] | [12] [0-9] | 3 [01]) $ /. Teste (a)}, número: função (a, b) {retorna this.optional (b) || / ^ (?: - ? \ d + | -? \ d {1,3} (?:, \ d {3}) +)? (?:\. \ d +)? $ /. testar (a)}, dígitos: function (a, b) {return this.optional (b) || / ^ \ d + $ /. teste (a)}, cartão de crédito: função ( a, b) {if (this.optional (b)) retorna "dependency-mismatch"; se (/ [^ 0-9 \ -] + /. testar (a)) retornar! 1; var c, d, e = 0, f = 0, g =! 1; se (a = a.replace (/ \ D / g, ""), a.length <13 || a.length> 19) retornar! 1; para (c = a.length-1; c> = 0; c -) d = a.charAt (c), f = parseInt (d, 10), g && (f * = 2)> 9 && (f- = 9), e + = f, g =! g; retorno e% 10 === 0}, minlength: função (b, c, d) {var e = a.isArray (b)? b.length: this.getLength (b, c); retorna this.optional (c) || ​​e> = d}, maxlength: function (b, c, d) {var e = a.isArray (b)? b.length: this.getLength (b, c ); return this.optional (c) || ​​d> = e}, rangelength: function (b, c, d) {var e = a.isArray (b)? b.length: this.getLength (b, c) ; return this.optional (c) || ​​e> = d [0] && e <= d [1]}, min: function (a, b, c) {return this.optional (b) || a> = c }, max: function (a, b, c) {retorna isso.opcional (b) || c> = a}, intervalo: função (a, b, c) {retorna this.optional (b) || a> = c [0] && a <= c [1]}, equalTo: função (b, c, d) {var e = a (d); retorna this.settings.onfocusout && e.off (". validate-equalTo"). on ("blur.validate-equalTo", function () {a ( c) .valid ()}), b === e.val ()}, remoto: função (b, c, d) {if (this.optional (c)) retorna "dependency-mismatch"; var e, f, g = this.previousValue (c); return this.settings.messages [c.name] || (this.settings.messages [c.name] = {}), g.originalMessage = this.settings.messages [ c.name] .remote, this.settings.messages [c.name] .remote = g.message, d = "string" == typeof d && {url: d} || d, g.old === b? g.valid: (g.old = b, e = this, this.startRequest (c), f = {}, f [c.name] = b, a.ajax (a.extend (! 0, {mode: "abortar", porta: "validar" + c.name, dataType: "json", dados: f, contexto: e.currentForm, sucesso:função (d) {var f, h, i, j = d ===! 0 || "true" === d; e.settings.messages [c.name] .remote = g.originalMessage, j? ( i = e.formSubmitted, e.prepareElement (c), e.formSubmitted = i, e.successList.push (c), delete e.invalid [c.name], e.showErrors ()) :( f = {} , h = d || e.defaultMessage (c, "remote"), f [c.name] = g.message = a.isFunction (h)? h (b): h, e.invalid [c.name] =! 0, e.showErrors (f)), g.valid = j, e.stopRequest (c, j)}}, d)), "pending")}}}); var b, c = {}; a.ajaxPrefilter? a.ajaxPrefilter (função (a, b, d) {var e = a.port; "abortar" === a.mode && (c [e] && c [e] .abort (), c [e ] = d)}) :( b = a.ajax, a.ajax = function (d) {var e = ("mode" em d? d: a.ajaxSettings) .mode, f = ("port" em d ? d: a.ajaxSettings) .port; return "abortar" === e? (c [f] && c [f] .abort (), c [f] = b.apply (isto, argumentos), c [f ]): b.apply (this, arguments)})});mensagens [c.name] .remote = g.originalMessage, j? (i = e.formSubmitted, e.prepareElement (c), e.formSubmitted = i, e.successList.push (c), delete e.invalid [c .name], e.showErrors ()) :( f = {}, h = d || e.defaultMessage (c, "remote"), f [c.name] = g.message = a.isFunction (h) ? h (b): h, e.invalid [c.name] =! 0, e.showErrors (f)), g.valid = j, e.stopRequest (c, j)}}, d)), " pendente ")}}}); var b, c = {}; a.ajaxPrefilter? a.ajaxPrefilter (função (a, b, d) {var e = a.port;" abortar "=== a.mode && ( c [e] && c [e] .abort (), c [e] = d)}) :( b = a.ajax, a.ajax = função (d) {var e = ("mode" em d? d : a.ajaxSettings) .mode, f = ("port" em d? d: a.ajaxSettings) .port; return "abortar" === e? (c [f] && c [f] .abort (), c [f] = b.apply (isto, argumentos), c [f]): b.apply (this, arguments)})});mensagens [c.name] .remote = g.originalMessage, j? (i = e.formSubmitted, e.prepareElement (c), e.formSubmitted = i, e.successList.push (c), delete e.invalid [c .name], e.showErrors ()) :( f = {}, h = d || e.defaultMessage (c, "remote"), f [c.name] = g.message = a.isFunction (h) ? h (b): h, e.invalid [c.name] =! 0, e.showErrors (f)), g.valid = j, e.stopRequest (c, j)}}, d)), " pendente ")}}}); var b, c = {}; a.ajaxPrefilter? a.ajaxPrefilter (função (a, b, d) {var e = a.port;" abortar "=== a.mode && ( c [e] && c [e] .abort (), c [e] = d)}) :( b = a.ajax, a.ajax = função (d) {var e = ("mode" em d? d : a.ajaxSettings) .mode, f = ("port" em d? d: a.ajaxSettings) .port; return "abortar" === e? (c [f] && c [f] .abort (), c [f] = b.apply (isto, argumentos), c [f]): b.apply (this, arguments)})});successList.push (c), delete e.invalid [c.name], e.showErrors ()) :( f = {}, h = d || e.defaultMessage (c, "remote"), f [c. nome] = g.message = a.isFunction (h)? h (b): h, e.invalid [c.name] =! 0, e.showErrors (f)), g.valid = j, e.stopRequest (c, j)}}, d)), "pendente")}}}); var b, c = {}; a.ajaxPrefilter? a.ajaxPrefilter (função (a, b, d) {var e = a .port; "abortar" === a.mode && (c [e] && c [e] .abort (), c [e] = d)}) :( b = a.ajax, a.ajax = function (d ) {var e = ("modo" em d? d: a.ajaxSettings) .mode, f = ("port" em d? d: a.ajaxSettings) .port; return "abortar" === e? (c [f] && c [f] .abort (), c [f] = b.apply (isto, argumentos), c [f]): b.apply (this, arguments)})});successList.push (c), delete e.invalid [c.name], e.showErrors ()) :( f = {}, h = d || e.defaultMessage (c, "remote"), f [c. nome] = g.message = a.isFunction (h)? h (b): h, e.invalid [c.name] =! 0, e.showErrors (f)), g.valid = j, e.stopRequest (c, j)}}, d)), "pendente")}}}); var b, c = {}; a.ajaxPrefilter? a.ajaxPrefilter (função (a, b, d) {var e = a .port; "abortar" === a.mode && (c [e] && c [e] .abort (), c [e] = d)}) :( b = a.ajax, a.ajax = function (d ) {var e = ("modo" em d? d: a.ajaxSettings) .mode, f = ("port" em d? d: a.ajaxSettings) .port; return "abortar" === e? (c [f] && c [f] .abort (), c [f] = b.apply (isto, argumentos), c [f]): b.apply (this, arguments)})});"pendente")}}}); var b, c = {}; a.ajaxPrefilter? a.ajaxPrefilter (função (a, b, d) {var e = a.port; "abortar" === a.mode && (c [e] && c [e] .abort (), c [e] = d)}) :( b = a.ajax, a.ajax = função (d) {var e = ("mode" em d? d: a.ajaxSettings) .mode, f = ("port" em d? d: a.ajaxSettings) .port; return "abortar" === e? (c [f] && c [f] .abort (), c [f] = b.apply (isto, argumentos), c [f]): b.apply (this, arguments)})});"pendente")}}}); var b, c = {}; a.ajaxPrefilter? a.ajaxPrefilter (função (a, b, d) {var e = a.port; "abortar" === a.mode && (c [e] && c [e] .abort (), c [e] = d)}) :( b = a.ajax, a.ajax = função (d) {var e = ("mode" em d? d: a.ajaxSettings) .mode, f = ("port" em d? d: a.ajaxSettings) .port; return "abortar" === e? (c [f] && c [f] .abort (), c [f] = b.apply (isto, argumentos), c [f]): b.apply (this, arguments)})});